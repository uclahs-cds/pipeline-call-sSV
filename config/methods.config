import nextflow.util.SysHelper
includeConfig "../external/pipeline-Nextflow-config/config/bam/bam_parser.config"
includeConfig "../external/pipeline-Nextflow-config/config/methods/common_methods.config"
includeConfig "../external/pipeline-Nextflow-config/config/schema/schema.config"
includeConfig "../external/pipeline-Nextflow-config/config/resource_handler/resource_handler.config"
includeConfig "${projectDir}/external/pipeline-Nextflow-config/config/store_object_as_json/store_object_as_json.config"

methods {
    set_ids_from_bams = {
        params.samples_to_process = [] as Set
        params.input.BAM.each { k, v ->
            v.each { bam_path ->
                def bam_header = bam_parser.parse_bam_header(bam_path)
                def sm_tags = bam_header['read_group'].collect{ it['SM'] }.unique()

                if (sm_tags.size() != 1) {
                    throw new Exception("${bam_path} contains multiple samples! Please run pipeline with single sample BAMs.")
                }
                params.samples_to_process.add(['id': sm_tags[0], 'path': bam_path, 'sample_type': k])
            }
        }
    }

    set_output_dir = {
        sample = params.samples_to_process
            .findAll{ it.sample_type == 'tumor' }
            .collect{ it.id }

        if (sample.size() != 1) {
            throw new Exception("${params.samples_to_process}\n\n Multiple Tumor BAMs found in the input! Please run pipeline one Tumor sample at a time.")
        }

        params.sample = sample[0]

        params.output_dir_base = "${params.output_dir}/${manifest.name}-${manifest.version}/${params.sample}"
        }


    set_log_output_dir = {
        def tz = TimeZone.getTimeZone("UTC")
        def date = new Date().format("yyyyMMdd'T'HHmmss'Z'", tz)

        params.log_output_dir = "${params.output_dir_base}/log-${manifest.name}-${manifest.version}-${date}"
    }

    set_pipeline_logs = {
        trace.enabled = true
        trace.file = "${params.log_output_dir}/nextflow-log/trace.txt"

        timeline.enabled = true
        timeline.file = "${params.log_output_dir}/nextflow-log/timeline.html"

        report.enabled = true
        report.file = "${params.log_output_dir}/nextflow-log/report.html"
    }

    set_process = {
        process.cache = params.cache_intermediate_pipeline_steps
    }

    // Set up env, timeline, trace, and report above.
    setup = {
        methods.set_env()
        schema.load_custom_types("${projectDir}/config/custom_schema_types.config")
        schema.validate()
        methods.set_ids_from_bams()
        methods.set_output_dir()
        methods.set_log_output_dir()
        methods.set_pipeline_logs()
        methods.set_process()
        methods.setup_docker_cpus()
        resource_handler.handle_resources("${projectDir}/config/resources.json")

        json_extractor.store_object_as_json(
            params,
            new File("${params.log_output_dir}/params.json")
        )
        }
    }
